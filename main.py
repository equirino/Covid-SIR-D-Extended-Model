# -*- coding: utf-8 -*-
"""PHYS128AL COVID-19 Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1onlKIiukFpGHxqAsZTydACOeTLZE8RYJ

**Basic SIR-C Model W/ Plot**
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
import pandas as pd

# Setting variable values

N = float(input("Total Population: "))
I0 = float(input("Initial infected: "))
R0 = float(input("Initial recovered: "))
D0 = float(input("Initial deaths: "))
k = float(input("Infection rate (cases/person/day): "))
g = float(input("Recovery rate (recoveries/day): "))
d = float(input("Length of simulation (days): "))
step = float(input("Time step (days): "))
runs = int(d/step)

S0 = N - I0 - R0

def RK(h, k, g, vars):

  # Runge-Kutta method
  # Calculates the next value of the function given the previous values.
  # Intended for use in a for loop with user inputted initial values.

  S, I, R, C = vars

  k1S = -(k * S * I)/N
  k2S = -(k * (S + (h*k1S)/2) * I)/N
  k3S = -(k * (S + (h*k2S)/2) * I)/N
  k4S = -(k * (S + (h*k3S)) * I)/N

  S_next = S + (1/6)*h*(k1S + 2*k2S + 2*k3S + k4S)

  k1I = (k * S * I)/N - (g * I)
  k2I = (k * S * (I + (h*k1I)/2))/N - (g * (I + (h*k1I)/2))
  k3I = (k * S * (I + (h*k2I)/2))/N - (g * (I + (h*k2I)/2))
  k4I = (k * S * (I + h*k3I))/N - (g * (I + h*k3I))

  I_next = I + (1/6)*h*(k1I + 2*k2I + 2*k3I + k4I)

  R_next = N - (I_next + S_next)

  C_next = N - S_next

  return [S_next, I_next, R_next, C_next]

tlist = []
Slist = []
Ilist = []
Rlist = []
Clist = []

t = 0

varlist = [S0, I0, R0, 0]

for i in range(runs):
  t += step
  tlist.append(t)
  Slist.append(varlist[0])
  Ilist.append(varlist[1])
  Rlist.append(varlist[2])
  Clist.append(varlist[3])
  varlist = RK(step, k, g, varlist)

#plot list values (referenced henrifroese's code to setup plot variables)

def SIRplot(tlist, Slist, Ilist, Rlist, Clist):
  f, axis = plt.subplots(1,1,figsize=(10,4))
  axis.plot(tlist, Slist, 'b', alpha=0.7, linewidth=2, label='Susceptible')
  axis.plot(tlist, Ilist, 'r', alpha=0.7, linewidth=2, label='Infected')
  axis.plot(tlist, Rlist, 'g', alpha=0.7, linewidth=2, label='Recovered')
  axis.plot(tlist, Clist, 'm', alpha=0.7, linewidth=2, label='Cumulative Cases')

  axis.set_xlabel('Time (days)')
  axis.set_ylabel('Population (people)')
  axis.title.set_text('Basic SIR Model')

  axis.yaxis.set_tick_params(length=0)
  axis.xaxis.set_tick_params(length=0)
  axis.grid(b=True, which='major', c='w', lw=2, ls='-')
  legend = axis.legend()
  legend.get_frame().set_alpha(0.5)
  for spine in ('top', 'right', 'bottom', 'left'):
      axis.spines[spine].set_visible(False)
  plt.show();

#call modelplot function with list variables

SIRplot(tlist, Slist, Ilist, Rlist, Clist)

"""**Extracting data from datadesk california covid-19 data and plotting it**"""

x = ['date']
y = ['confirmed_cases']

Infected = pd.read_csv("https://raw.githubusercontent.com/datadesk/california-coronavirus-data/master/cdph-state-totals.csv", header=0, parse_dates=[0], index_col=0, usecols=["date", "confirmed_cases"], squeeze=True)

print("Total number of days observed from data:", Infected.size)

print(Infected.describe())

def modelplot(Infected):
  f, ax = plt.subplots(1,1,figsize=(10,4))
  ax.plot(Infected, 'b', alpha=0.7, linewidth=2, label='Confirmed Cases')

  ax.set_xlabel('Time(dates)')
  ax.set_ylabel('Population (people)')
  ax.title.set_text('Confirmed cases from datadesk covid-19 data')

  ax.yaxis.set_tick_params(length=0)
  ax.xaxis.set_tick_params(length=0)
  ax.grid(b=True, which='major', c='w', lw=2, ls='-')
  legend = ax.legend()
  legend.get_frame().set_alpha(0.5)
  for spine in ('top', 'right', 'bottom', 'left'):
      ax.spines[spine].set_visible(False)
  plt.show();

#call modelplot function with list variables

modelplot(Infected)

"""**Finding k**"""

# -*- coding: utf-8 -*-
"""
Created on Wed Feb 17 03:25:49 2021

@author: equir
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np


Infected = pd.read_csv("https://raw.githubusercontent.com/datadesk/california-coronavirus-data/master/cdph-state-totals.csv")

Infected.drop(Infected.head(300).index,inplace=True)
Infected.drop(Infected.tail(30).index,inplace=True)

print("Total number of days observed from data:", Infected.size)

print(Infected.describe())

yData = []
xList = []

x = 0

for ind in reversed(Infected.index):
   yData.append(Infected['confirmed_cases'][ind])
   x += 1
   xList.append(x)

log_yData = []

for i in yData:
    if i == 0:
        log_yData.append(0)
    else:
        log_yData.append(np.log(i))


fit = np.polyfit(xList, log_yData, 1)

m = fit[0]
b = fit[1]

print("slope(k):", m)
print("intercept:", b)

line = np.poly1d(fit)

def bestfitplot(xList, log_yData, line):
  f, axis = plt.subplots(1,1,figsize=(10,4))
  axis.plot(xList, log_yData, 'b', alpha=0.7, linewidth=2, label='logarithm data')
  axis.plot(xList, line, 'r--', alpha=0.7, linewidth=2, label='Line of Best Fit')

  axis.set_xlabel('Time (days)')
  axis.set_ylabel('log(I)')
  axis.title.set_text('Extracting k')

  axis.yaxis.set_tick_params(length=0)
  axis.xaxis.set_tick_params(length=0)
  axis.grid(b=True, which='major', c='w', lw=2, ls='-')
  legend = axis.legend()
  legend.get_frame().set_alpha(0.5)
  for spine in ('top', 'right', 'bottom', 'left'):
      axis.spines[spine].set_visible(False)
  plt.show();

bestfitplot(xList, log_yData, line(xList))

"""**Error Analysis for k**"""

import numpy as np
from numpy import exp
import matplotlib.pyplot as plt
from scipy.integrate import odeint


kbest= 4/25 # Best guess
kupper= 4.5/25 # Upper bound
klower= 3.5/25 # Lower bound
g = 9/100 #Assume infected recover after two weeks on average#
N = 39510000 #Assume starting population is 1000 people
I0 = 2 #One person initially infected
tot_days= 380 #Run the simulation for 250 days

times = np.linspace(0,tot_days,tot_days*24) #runs the simulation sampling once an hour

def odes(eqs, t):
     s, i, r = eqs
     dsdt = -k*s*i/N
     didt = k*s*i/N - g*i
     drdt = g*i
     return [dsdt, didt, drdt]

#Run it for bounds on k

k=kbest
solbest = odeint(odes, [N-I0,I0,0], times)
k=kupper
solupper = odeint(odes, [N-I0,I0,0], times)
k=klower
sollower=odeint(odes, [N-I0,I0,0], times)


Ibest = solbest[:,1]
Iupper = solupper[:,1]
Ilower = sollower[:,1]

ICbest = N-solbest[:,0]
ICupper = N-solupper[:,0]
IClower = N- sollower[:,0]


plt.figure()
plt.title('Infected Trajectory with Approx. 1-Sigma deviations')
plt.scatter(times, Iupper,label="+1 sigma");
plt.scatter(times, Ibest,label=" Average Infected");
plt.scatter(times, Ilower,label=" -1 sigma");
plt.legend();

plt.figure()
plt.title('Cumulative Infections with Approx. 1-Sigma Region')
plt.fill_between(times,ICupper, IClower,  alpha=0.2)
plt.plot(times, ICbest,label=" Average Cumulative Infected");
plt.legend();

"""**Extended SIR-D Model**"""

N1 = float(input("Population: "))
I1 = float(input("Initial infected: "))
R1 = float(input("Initial recovered: "))
D1 = float(input("Initial deaths: "))
k1 = float(input("Infection rate (cases/person/day): "))
g1 = float(input("Recovery rate (recoveries/day): "))
m1 = float(input("Mortality rate (deaths/day): "))
d1 = float(input("Length of simulation (days): "))
step1 = float(input("Time step (days): "))
runs1 = int(d1/step1)

S1 = N1 - (I1 + R1 + D1)

def RK_SIRD(h, k, g, m, vars):

  # Runge-Kutta method with deaths included
  # Calculates the next value of the function given the previous values.
  # Intended for use in a for loop with user inputted initial values.

  S, I, R, Rl, Ru, D, Dl, Du = vars

  k1S = -(k * S * I)/N1
  k2S = -(k * (S + (h*k1S)/2) * I)/N1
  k3S = -(k * (S + (h*k2S)/2) * I)/N1
  k4S = -(k * (S + (h*k3S)) * I)/N1

  S_next = S + (1/6)*h*(k1S + 2*k2S + 2*k3S + k4S)

  k1I = (k * S * I)/N1 - (g * I)
  k2I = (k * S * (I + (h*k1I)/2))/N1 - (g * (I + (h*k1I)/2))
  k3I = (k * S * (I + (h*k2I)/2))/N1 - (g * (I + (h*k2I)/2))
  k4I = (k * S * (I + h*k3I))/N1 - (g * (I + h*k3I))

  I_next = I + (1/6)*h*(k1I + 2*k2I + 2*k3I + k4I)

  R_next = R + (g-m)*I*h

  R_next_lower = Rl + (g-0.05)*I*h

  R_next_upper = Ru + (g-0.03)*I*h

  D_next = D + (m)*I*h

  D_next_lower = Dl + (0.03)*I*h

  D_next_upper = Du + (0.05)*I*h

  #C_next = N - S_next

  return [S_next, I_next, R_next, R_next_lower, R_next_upper, D_next, D_next_lower, D_next_upper]

tlist1 = []
Slist1 = []
Ilist1 = []
Rlist1 = []
Rllist = []
Rulist = []
Dlist1 = []
Dllist1 = []
Dulist1 = []
#Clist1 = []

t1 = 0

varlist1 = [S1, I1, R1, R1, R1, D1, D1, D1]

for i in range(runs1):

  t1 += step1
  tlist1.append(t1)
  Slist1.append(varlist1[0])
  Ilist1.append(varlist1[1])
  Rlist1.append(varlist1[2])
  Rllist.append(varlist1[3])
  Rulist.append(varlist1[4])
  Dlist1.append(varlist1[5])
  Dllist1.append(varlist1[6])
  Dulist1.append(varlist1[7])
  varlist1 = RK_SIRD(step1, k1, g1, m1, varlist1)

plt.plot(tlist1, Slist1)

#plot list values (referenced henrifroese's code to setup plot variables)

def SIRDplot(tlist, Slist, Ilist, Rlist, Rllist, Rulist, Dlist, Dllist, Dulist):
  f, axis = plt.subplots(1,1,figsize=(10,4))
  axis.plot(tlist1, Slist1, 'b', alpha=0.7, linewidth=2, label='Susceptible')
  axis.plot(tlist1, Ilist1, 'r', alpha=0.7, linewidth=2, label='Infected')
  axis.plot(tlist1, Rlist1, 'g', alpha=0.7, linewidth=2, label='Recovered')
  axis.plot(tlist1, Rllist, 'g--', alpha=0.7, linewidth=2, label='Recovered')
  axis.plot(tlist1, Rulist, 'g--', alpha=0.7, linewidth=2, label='Recovered')
  axis.plot(tlist1, Dlist1, 'black', alpha=0.7, linewidth=2, label='Dead')
  axis.plot(tlist1, Dllist1, 'c--', alpha=0.7, linewidth=2, label='Dead Upper')
  axis.plot(tlist1, Dulist1, 'c--', alpha=0.7, linewidth=2, label='Dead Lower')
  #axis.plot(tlist1, Clist1, 'm', alpha=0.7, linewidth=2, label='Cumulative Cases')

  axis.set_xlabel('Time (days)')
  axis.set_ylabel('Population (people)')
  axis.title.set_text('SIRD Model')

  axis.yaxis.set_tick_params(length=0)
  axis.xaxis.set_tick_params(length=0)
  axis.grid(b=True, which='major', c='w', lw=2, ls='-')
  legend = axis.legend()
  legend.get_frame().set_alpha(0.5)
  for spine in ('top', 'right', 'bottom', 'left'):
      axis.spines[spine].set_visible(False)
  plt.show();

#call modelplot function with list variables

SIRDplot(tlist1, Slist1, Ilist1, Rlist1, Rllist, Rulist, Dlist1, Dllist1, Dulist1)

"""**Finding the mortality rate m**"""

data = pd.read_csv("https://raw.githubusercontent.com/datadesk/california-coronavirus-data/master/cdph-state-totals.csv")

interceptlist = []

for j in range(10):

  logdeath = []
  axislist = []

  xaxis = 0

  for i in range((355+j), 300, -1):
    xaxis += 1
    axislist.append(xaxis)
    logdeath.append(np.log(data.iloc[i][2]))

  logdeath = [0 if x != x else x for x in logdeath]

#plt.plot(axislist, logdeath)

  deathfit = np.polyfit(axislist, logdeath, deg=1)
  intercept = deathfit[1]

  interceptlist.append(intercept)

mlist = []

for b in interceptlist:
  mlist.append(0.16*np.e**(b))

print(mlist)

std = np.std(mlist)
print(std)

mean = np.mean(mlist)
print(mean)